[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statement on Tools",
    "section": "",
    "text": "1 Introduction\n\nIn this book we’ve compiled a set of technical resources, links and write down our experiences of using open data science programs like R and Python within the NHS and beyond.\nIt is highly opinionated and is not representative or endorsed by the NHS or any organisations within the NHS, public sector or civil service. Whilst the views are written by members of the NHS-R Community, these too may not necessarily be shared with everyone equally and even may change over time.\nIf you’d like to contribute or comment feel free to open an issue on the GitHub repository"
  },
  {
    "objectID": "purpose.html#nhs-r-community",
    "href": "purpose.html#nhs-r-community",
    "title": "2  Purpose",
    "section": "2.1 NHS-R Community",
    "text": "2.1 NHS-R Community\nThis book is being created by the NHS-R Community which was set up in 2018 to promote the use of R in the NHS. As a community we have grown and built up a reputation for openness, sharing and support through training, webinars, conferences and a very active and friendly Slack group. Whilst the focus of NHS-R was originally on R and the NHS, many members of the community use other tools and come from local authorities, civil service, voluntary sector, charitable organisations, industry and some individuals who are not part of any organisation. More detail on the NHS-R Community can be found in the NHS-R Way book which is published free through GitHub but, as that is not always available to every organisation, is redirected through the NHS-R Community url."
  },
  {
    "objectID": "open-code.html#introduction",
    "href": "open-code.html#introduction",
    "title": "3  Open code in the NHS",
    "section": "3.1 Introduction",
    "text": "3.1 Introduction\nThere are number of organisations and publications advocating open coding in its various guises within the NHS and more generally across the public sector and academia. This page is intended as a place to collate relevant literature and proposed/tried approaches to implement open code policies in the NHS, from individual teams up to entire organisations.\nThere is also a significant crossover between open code and software engineering best practice, which means that they are often promoted together as an effective means to improve reproducibility."
  },
  {
    "objectID": "open-code.html#references",
    "href": "open-code.html#references",
    "title": "3  Open code in the NHS",
    "section": "3.2 References",
    "text": "3.2 References\nThe following is a list of some of the material available discussing and supporting open coding and software engineering approaches to code development in the NHS:\n\nBetter, broader, safer using health data for research and analysis (also known as The Goldacre Report) - a systematic and far-reaching report, written on behalf of the Department of Health and Social Care, advocating for open coding and Reproducible Analytical Pipelines (RAP) in the NHS,\nGovernment Analysis Function Reproducible Analytical Pipelines (RAP) Strategy - released in June 2022 this is a comprehensive strategy for Government in summarising the finding of the RAP strategy since 2017 and the plan for future work,\nData saves lives: reshaping health and social care with data - a broad document that covers many aspects of “improving trust in the health and care system’s use of data” which extends to how data is used and references the Better, broader, safer using health data for research and analysis Better, broader and safer using health data for research and analysis (Goldacre),\nOffice for Statistics Regulation – Overcoming Barriers to Adoption of RAP - a report written in support of RAP for adoption by all government departments doing analytics, describing the challenges and recommending solutions to address those challenges covering both organisational, team-level and individual barriers,\nOpen sourcing analytical code - from the Analysis Function and first published in March 2023 is guidance for anyone working in government and who is involved or owns analysis pipelines,\nQuality assurance of code for analysis and research - also known as the Duck Book is a living document for Analysis Standards and Pipelines for the Office of National Statistics,\nNHS England Open Source Programme - can be found in the Digital Transformation pages,\nGovernment GitHub Community - links to UK Central and Council GitHub repositories amongst many others across the world,\nNHS England R Reporting - includes tutorials and example A&E Attendance Report,\n\n\n3.2.1 From organisations/teams that no longer operate\n\nNHSx (now NHS England) Open Source Policy - a comprehensive description of why and how open source should be implemented in the NHS, including statements about best practice and a check list for open sourcing code. An issue was opened in Nov 2022 about rebranding to NHS England from NHSx,\nNHS Digital (now NHS England) RAP Community of Practice - a wealth of material pertaining to setting up and running RAP. The team also write blogs,\nMaking source code open and reusable - from the Gov.uk Service Manual for the Government Digital Service,\nCDU Data Science Blog - the Clinical Development Unit was a team in Nottinghamshire Healthcare NHS Foundation Trust that coded openly and wrote about some of their approaches on a {distill} blog site. This also features in the NHS England playbook which is a series of case examples, and which was itself referred to in the Data Saves Lives document:\n\n\nOur commitments We will publish a digital playbook on how to open source your code for health and care organisations. Guidance on where to put the code, how to license and maintain it, and best practice for working with suppliers will be published in addition to case studies of teams who have done this – completed May 2022."
  },
  {
    "objectID": "open-code.html#specific-challenges",
    "href": "open-code.html#specific-challenges",
    "title": "3  Open code in the NHS",
    "section": "3.3 Specific challenges",
    "text": "3.3 Specific challenges\n\n3.3.1 Opening code without exposing data/‘secrets’\nIn coding terms exposing secrets often mean sharing passwords or keys but for the data analysis that occurs in the NHS and other public sector organisations, this will also mean the sharing of personal, clinical or other sensitive data. In practice there are a number of approaches to avoiding this happening, see the specific NHS approaches:\n\nNHSx Open Source Policy (note NHSx is now NHS England but this hasn’t been adopted as an NHS England Policy),\nNHS England’s R Reporting) and\nCDU Data Science Team blogs about GitHub\nMaking source code open and reusable (provides broad requirements like storing secret keys and credentials separately)\nNHS North Central London ICB Analytics Team - use a template repository for new analytical projects and further information is detailed in the slides for Intro to Git\n\nand these include setting up repositories so there are automated restrictions to prevent and reduce the risk of unintentional disclosure of any sensitive data.\nNevertheless, we do have to rely upon people using these recommendations and setting up their systems which is very similar to our use of email or social media accounts. As an example, with email we need to rely upon senders using the blind copy in email if the recipients include patients or the public as there is no automated way to prevent a breach of emails otherwise. Consequently, mistakes have and do happen and there are mechanisms which are in place to report these breaches and does not mean that we prevent people from using email or social media. Systems like GitHub do offer the possibility to set up processes to prevent, reverse and delete accidental sharing (breaches) but are still subject to reporting for near misses and incidents when these occur. However, it may be that these are only reported locally and do not, currently, get shared more widely.\n\n\n3.3.2 Opening code without giving away commercial/business/clinical proprietary information (and Intellectual Property)\nThe issue of intellectual property is a very difficult one to argue against, particularly when analysts and data scientists are not necessarily trained or familiar in this area of law. However, it is often used as a reason why not to share specific code, like SQL, but without any formal detail as to how this will be breaking any laws. By publishing SQL code it is often assumed that the structure of the databases, which is owned by a company, could be inadvertently revealed. However, there are examples of clinical database schemas like that of TPP who own SystmOne and which has been shared as part of the OpenSafely secure analytics platform for NHS electronic health records and it could be said that discussions related to sharing code should be considered as part of the procurement process. And also Government guidance, When code should be open or closed, from the Central Digital & Data Office states:\n\nUnless your database schema contains credentials it is not sensitive and can be open. You should store any credentials separately and keep them closed.\n\n\n\n3.3.3 Concerns over code being “sold” back to the NHS at a profit\nThis is an argument that is often used and not necessarily with any examples of when this has ever occurred. Nevertheless, if it did happen we can explore that as the end result is not necessarily a reason to not share publicly.\n\n3.3.3.1 Adding value\nThe courses from NHS-R Community are all open to the public and can be used by anyone to learn, teach or amend. Nevertheless, they are being used by organisations, like the Strategy Unit (part of NHS Midlands and Lancashire Commissioning Strategy Unit), who use the materials and offer training sessions at a daily rate for the workshops. This means that, although the materials are free, the services of the person running the course is being paid for and that’s an added service.\nThe same may be the case for code that is built upon, so if a model is taken and enhanced, then that’s an added service. Of course, that subsequent code may not be made available to the public, but the original will be so it’s upon the purchaser to make that judgement on whether a service that leads to closed code is a good thing to purchase and our suggestion is that it’s always considered an important part of procurement that code is made open.\n\n\n3.3.3.2 Selling back the same code\nTaking the idea of adding value further, what if a company got hold of freely shared code and sold it back to the NHS? Under these circumstances that is unfortunate but the mistake that is made here is on not looking for the code in the open in the first place and that could be related to the level of knowledge of the staff on open code. A better remedy would be promoting the use of open code and supporting staff in this professional field to use and contribute to open code areas like GitHub.\n\n\n3.3.3.3 Taking ideas and selling them back\nIf there were a situation where something is written, for example, a proposal which is taken up by a consultancy and sold back verbatim, this is again unfortunate as there is an unnecessary cost to public funds. However, there is a point that the sharing was beneficial because the idea was worthwhile. Many consultancies already work on the basis of talking to staff when given a project and gaining information from people at all levels, something that may not have happened internally. Ideas from people “doing the work” do not always go as high as the board but can get there more easily when filtered through management consultancies.\nIf we are concerned about being sold our own work then, by putting it out in the open, we are also allowing discovery of it by everyone.\n\n\n\n3.3.4 Coding in the open\nThere is, currently, no one policy or procedure that can be referred to in terms of coding in the open. Whilst it has been recommended strongly in many of the important reviews available to the NHS like Data Saves Lives and Better, broader and safer using health data for research and analysis (Goldacre) there continues to be little guidance on what this looks like in day to day work. Some teams have published in the open, like the CDU Data Science Team and features as a case study example, however, the team has changed in approach and name as of 2023 and the blog site is no longer being updated. The NHSx Open Source policy recommended that all development/analytics work done in the NHS be coded in the open unless there is good reason not to. However, NHSx moved into NHS England in 2022 and the GitHub repository (where this is published) and continues to state:\n\nCurrent status: Version 1.0 - This policy is currently going through internal review as part of the adoption process.\n\nIt is worth noting, in terms of open coding, this document also says:\n\nAn internal code review should be conducted for all open source projects and specific responsibilities must be met within or close to the development team.\n\nReviews could be deemed to slow the process of sharing code openly and so needs to be considered within the context of software code maintenance which is a subject in itself. Books on code review principles from the Tidyteam at Posit can be a really good place to start.\nThe Making source code open and reusable suggests making your code open from the start and gives a short check list on what to consider when making existing code open."
  },
  {
    "objectID": "open-code.html#licenceslicenses",
    "href": "open-code.html#licenceslicenses",
    "title": "3  Open code in the NHS",
    "section": "3.4 Licences/Licenses",
    "text": "3.4 Licences/Licenses\n\n3.4.1 Language\nTo clarify on spelling: license is both a noun and a verb in US English, but in UK English licence may be used for a noun and license as a verb. This becomes important for searches, which is why the header title here has both spelling - just in case.\nThe GDS Way says:\n\nWhen using a proper name, use the appropriate spelling for that thing (e.g. the MIT License.)\n\nbut also:\n\nEach repository should include a licence file. This should be called LICENCE or LICENCE.md.\n\n\n\n3.4.2 How to use licences\nAlthough documents like Data Saves Lives states there was an intention to:\n\npublish a digital playbook on how to open source your code for health and care organisations. Guidance on where to put the code, how to license and maintain it, and best practice for working with suppliers will be published in addition to case studies of teams who have done this – completed May 2022.\n\nthis hasn’t led to any particular document to explain when or how to use licences. The reference to a digital play book where the requirement is to:\n\ncreate a project that can be used by other healthcare organisations\n\nlinks to case study scenarios which may have information, but which will require reading through to check and reference. One site that is listed is the CDU Data Science Team and whilst this team used licences there was never any explicit mention on how or when to use them.\nGovernment documents like the Duck book do have sections on copyright and licenses and their recommendations, along with the Analysis Function, are to use MIT and OGL.\nThe Making source code open and reusable states:\n\nYou should publish your code under an Open Source Initiative compatible licence. For example, GDS uses the MIT licence.\n\n\nAll code produced by civil servants is automatically covered by Crown Copyright.\n\nHowever, many people who are part of the NHS-R Community are not considered civil servants:\n\n… civil servants are defined much more narrowly than public sector workers: police, teachers, NHS staff, members of the armed forces and local government officers are not counted as civil servants.\n\nEven where a person’s work is covered by being a civil servant, it is still really good practice to include the corresponding licence to any published work as it cannot be assumed that people know the work is covered by the licence or that the person was a civil servant.\nAlso, whilst some organisations in the NHS are considered Crown bodies like the Department of Health:\n\nSubsection (7) provides that, like NHS trusts, NHS foundation trusts are not Crown bodies: see paragraph 18 of Schedule 2 to the National Health Service and Community Care Act 1990 (“the 1990 Act”).\n\nHealth and Social Care (Community Health and Standards) Act 2003 Explanatory Notes.)\n\n\n3.4.3 NHS-R Community use of licences\nThe use of licences by NHS-R Community for the GitHub repositories will be detailed in the NHSR-Way book under Style Guide for code.\n\n\n3.4.4 Setting up licenses\nThere are two ways to starting a repository for sharing on GitHub. Firstly, there is creating a repository directly on the GitHub website and you can select the appropriate licence as you do that.\nIf, however, you create the project locally, using R for example, you can add a licence to it using a package called {usethis} and typing in the R console:\nusethis::use_cc0_license()\nusethis::use_mit_license()\nOGL though does not appear in the selections for {usethis} or GitHub. Crown Copyright sometimes appears as a separate licence as in the {a11ytables} and sometimes combined as in pay-aminusers, an example referred to in the GDS Way.\nDual licences, like MIT and CC0 are not so commonly combined and there is more information on the GitHub site about dual licensing."
  },
  {
    "objectID": "open-code.html#useful-blogs",
    "href": "open-code.html#useful-blogs",
    "title": "3  Open code in the NHS",
    "section": "3.5 Useful blogs",
    "text": "3.5 Useful blogs\nGDS The benefits of coding in the open\nGOV.uk Don’t be afraid to codein the open: here’s how to do it securely"
  },
  {
    "objectID": "statement-on-using-tools-r.html#about-this-chapter",
    "href": "statement-on-using-tools-r.html#about-this-chapter",
    "title": "4  Statement on using tools - R",
    "section": "4.1 About this chapter",
    "text": "4.1 About this chapter\nThis chapter elaborates what is required to make R viable in practice. R is a powerful language for statistical work and other kinds of data analysis. Much of this power comes from the way that R fits together with two important helpers: R Studio and R packages. A later chapter describes the way that R, R Studio, and R packages work together in technical language, albeit as simplified as possible.\nOur aim in writing this particular chapter is to provide a useful resource to leaders within the NHS and other organisations in health and care who wish to support and encourage the use of R in their practice. Our motive in writing this chapter is to overcome the institutional reluctance that is often encountered when trying to use new open-source tools. For many years we have had guidance that open source programs should be encouraged, yet open source tools are frequently identified as security or information governance risks by organisations. We think that these concerns are largely the result of confusion about the nature of open source tools. This chapter is therefore aimed at clearing up some of this confusion, by providing a focused introduction to the tools that are an integral part of R.\nAlthough the current focus of this chapter is specific to R and its tools, we note that similar situations are found in many other languages and programmes. We discuss this below in the section Why not include all this useful code in R?. As the NHS-R Community matures we may extend this learning to cover other open-source tools such as Python.\n\n4.1.1 Some use cases for this chapter\n\nTo provide guidance to Information Governance (IG) practitioners who have been asked to evaluate the use of R in some health and care context\nTo provide reassurance and explanation to colleagues and managers when R is being considered for use in some projects\nTo support those new to R in understanding how the many packages and tools fit together"
  },
  {
    "objectID": "statement-on-using-tools-r.html#introduction",
    "href": "statement-on-using-tools-r.html#introduction",
    "title": "4  Statement on using tools - R",
    "section": "4.2 Introduction",
    "text": "4.2 Introduction\nR uses packages, which are small, reusable collections of code that allow users to create and use functions. These packages can be easily distributed so that users can adopt them in the code that they are writing. To illustrate, imagine that you run into a tricky problem programming problem. We can think of three different ways of solving this problem:\n\nWrite all-new code from scratch\nCopy-paste working code from somewhere else\nUse a package\n\nThe traditional approach might be to solve the problem by writing completely new code from scratch. And sometimes writing original code is the best way to solve problems, particularly if those problems are very unusual.\nOften though the problems that we encounter are not at all unusual. Commonly encountered problems are, by definition, the kind of problems that we would most often encounter. We give an example below about times and dates, which frequently cause problems for programmers. Writing a completely original solution each time we encounter a common problem seems inefficient. So it is no surprise that code reuse is common practice across the field. The scale of websites dedicated to sharing useful code (like Stack overflow) is testament to the deep sense of professional loathing that many programmers have for inefficiency in their work.\nBut finding and sharing reliable code to solve common problems comes with difficulties of its own. You could look for solutions online, and then copy and paste any promising code chunks into your project. While generally quicker and easier than writing new code from scratch, copying code manually requires a surprisingly high degree of skill. Both an expert’s eye for assessing possible solutions, and the skills to appropriately adjust borrowed code to fit the requirements of your project are needed.\nPackages are a way of standardising and sharing useful code. Rather than copying and adjusting a block of code, you simply add the package to your programme. You can then use the new functions contained in the package as if you had written them yourself. They are a consistent way to extend the functions available to user. Many programming languages use packages (or libraries) in a similar way. Python is a good example, where many useful functions are done using third-party packages.\nPackages make R better: easier to use and learn, more flexible, and with richer options for analysis. They are a feature and not a bug, and for many users their work in R utterly depends on packages."
  },
  {
    "objectID": "statement-on-using-tools-r.html#what-is-inside-a-package",
    "href": "statement-on-using-tools-r.html#what-is-inside-a-package",
    "title": "4  Statement on using tools - R",
    "section": "4.3 What is inside a package?",
    "text": "4.3 What is inside a package?\n\n“In R, the fundamental unit of shareable code is the package. A package bundles together code, data, documentation, and tests, and is easy to share with others.” Wickham and Bryan, 2019. R packages: Organize, Test, Document and Share Your Code\n\nTo illustrate, we can show the code from two related NHS-R packages: NHSRplotthedots (CRAN) and NHSRdatasets (CRAN)\n\n\n\nComponent\nPurpose\nExample\n\n\n\n\nCode\nAllows the user to use functions in their own code\n\n\n\nData\nDemonstrates the function(s), training new users\n\n\n\nDocumentation\nUser guides, package vignettes and other documentation\n\n\n\n\nAnd we can usually find at least three of these components in most R packages (tests are a bit more elusive, and are less commonly encountered). It’s also worth noting that the data included in community packages is sample data or open data that is really meant to help users experiment with the new functions in a package. It’s definitely not standard practice to share real data for analysis in this way. Lots of these standard datasets built into packages - like mtcars - are used over and over again as ways of demonstrating R functions.\nIf you’re writing a package, we would encourage caution as to the data that you include. We won’t provide detailed guidance here on what’s okay to include in your package. But would be useful to remind package authors that the proper oversight should be carried out before sharing any data as part of your package."
  },
  {
    "objectID": "statement-on-using-tools-r.html#why-not-include-all-this-useful-code-in-r",
    "href": "statement-on-using-tools-r.html#why-not-include-all-this-useful-code-in-r",
    "title": "4  Statement on using tools - R",
    "section": "4.4 Why not include all this useful code in R?",
    "text": "4.4 Why not include all this useful code in R?\nCall the approach that R takes modular. R provides some core functions, but users are able to add modules (packages) that change the functions that are available. It’s like being able to customize the tools that you use to work on each project.\nUsers coming to R from software that does not work like this can find this modular approach messy and odd. If you’ve grown up working in Microsoft Excel, then you will be accustomed to doing almost any task using just the build-in functions in the core software. For that user, switching to an environment where the user has to select and add small, specific, tools to achieve things can feel rather alien. And this difference has deep roots, representing a deep difference in software engineering philosophy. R broadly follows a UNIX-like small tools approach as a way of managing and reducing the complexity of computer systems. As Eric Raymond put it, this is one of the central rules of the UNIX philosophy:\n\n\nRule of Modularity: Write simple parts connected by clean interfaces. Raymond 2003 The Art of UNIX Progamming\n\n\nAnother reason: each project written in R is different. Isn’t it great to be able to select just the right tools needed to do the job properly? On this, you can find a list of some of the packages that the NHS-R community find particularly useful at https://github.com/nhs-r-community/awesome-nhsr."
  },
  {
    "objectID": "statement-on-using-tools-r.html#where-do-you-find-packages",
    "href": "statement-on-using-tools-r.html#where-do-you-find-packages",
    "title": "4  Statement on using tools - R",
    "section": "4.5 Where do you find packages?",
    "text": "4.5 Where do you find packages?\nThe recognised global repository for R packages is called CRAN (the Comprehensive R Archive Network). R packages must pass through a strict system of checks across multiple platforms if they’re to be accepted into CRAN. Acceptance is a sign of quality and a protective measure that helps ensure that packages meet minimum standards. It also provides extra assurance to business IT teams that the packages are ‘safe’ for use.\nThe power of packages is reflected in the number of them that are available. CRAN currently lists a total of 19,790 packages (July 2023). Adding and updating packages is one of the ways that R keeps developing. Many community groups - including NHS-R - have produced packages to do useful things for their work. And these packages are freely available to the public.\nThat community spirit is an important part of the open software movement. We think that sharing useful code in an open way is important. Governments too think similarly. For example, see the requirement to make new code open source from NHS England digital openness and similar from ScotGov. The Better, broader and safer using health data for research and analysis (Goldacre) comes to similar conclusions:\n\nLibraries Useful functions often outgrow individual projects and build a broader user-base, especially when a large number of users are all trying to solve the same suite of related problems, with a range of related functions. When this happens, more experienced programmers move the work into reusable code ‘libraries’ and share them through package indexes or archive networks. The process of creating and sharing libraries can improve the quality of code, because work that is more widely used is likely to be more widely reviewed. Popular libraries tend to be well documented and come with clear explanations and examples, which decrease the barriers to entry for inexperienced coders: when more people use the work, more people invest in improving it. By creating and sharing a library, researchers contribute to the broader research community. This more advanced variety of code sharing is common in many areas of scientific research, such as Geographic Information Science, but it is less common at present in health data research.\n\nWe believe that this approach is safe, and are not aware of any data protection issues that have arisen because of the use of packages in R."
  },
  {
    "objectID": "statement-on-using-tools-r.html#an-example",
    "href": "statement-on-using-tools-r.html#an-example",
    "title": "4  Statement on using tools - R",
    "section": "4.6 An example",
    "text": "4.6 An example\n\n\n\n\n\nimage credit\nWorking with dates is often a source of pain for data analysts. That’s because times and dates are surprisingly complicated. For example, there are lots of ways of storing and representing dates. There are also many inconsistencies - 24 hours in a day but 60 seconds in a minute, leap years, different numbers of days in months, time zones, and so on.\nMany analysts use an R package called {lubridate} to help manage dates and times. This package has lots of helpful functions for parsing, calculating, and representing dates and times. For example, imagine that you want to calculate the number of seconds between two dates. For simple cases, that’s not too hard to do in base R. But what if some of your time values cross time zones? What if clock time has changed (say, due to daylight savings) during that interval? The functions in the {lubridate} package allow analysts to ignore some of this complexity, meaning that they don’t need to write many lines of code in order to accommodate time zones each time they want to do a simple duration calculation."
  },
  {
    "objectID": "statement-on-using-tools-r.html#whats-the-problem",
    "href": "statement-on-using-tools-r.html#whats-the-problem",
    "title": "4  Statement on using tools - R",
    "section": "4.7 What’s the problem",
    "text": "4.7 What’s the problem\nAs we’ve discussed above, the philosophy of using packages in R is rather different from other approaches. This can cause difficulties, particularly when risk management practices often assume that a programme is a broadly stable lump of functions, rather than a loose coalition of packages. To identify of this issues that we have encountered:\n\nPackages present a moving target for information governance. How can we assess the risk of something that is always liable to change? Our response to this: consider the system (R, RStudio, and packages) as the correct unit of analysis. Because packages are so widely used, it does not make sense to carry out information governance assessments of R by itself.\nThere are so many packages, and there are several different sources for packages. How can we be sure that they are all safe? Our response to this is to point to community standards for packages. For example, CRAN carries out oversight on submitted packages, which have to meet certain standards. This precludes some worries about what might be lurking in a hypothetical package. It is also worth saying that we are aware of no cases where R packages have lead to security problems for users. Nevertheless, there are things to consider and there are packages like {oysteR} that\n\n\nallows users to scan their installed R packages\n\n\nPackages contain data, and therefore need data protection impact assessment. As discussed above, the data in R packages is used for testing, training, and demonstration purposes only, and isn’t a method for sharing live data between users.\nHow can free software be trustworthy? Isn’t there going to be a catch? And who is responsible for ensuring the quality and safety of this software? Free open-source software (FOSS) is now widely used across sectors. Useful comments in FAQ section of HSMA site:\n\n\nIt is also important to highlight that all software has potential vulnerabilities, including the proprietary software that you already have installed. Therefore, good software security practices should be maintained regardless of the software you are using."
  },
  {
    "objectID": "statement-on-using-tools-python.html",
    "href": "statement-on-using-tools-python.html",
    "title": "5  Statement on using tools - Python",
    "section": "",
    "text": "[TODO] Holding text to be clear this is broader in scope than just R"
  },
  {
    "objectID": "statement-on-using-tools-git.html",
    "href": "statement-on-using-tools-git.html",
    "title": "6  Statement on using tools - Git and GitHub",
    "section": "",
    "text": "[TODO] Holding text to be clear this is broader in scope than just R"
  },
  {
    "objectID": "statement-on-using-tools-shiny.html#posit-connect-server",
    "href": "statement-on-using-tools-shiny.html#posit-connect-server",
    "title": "7  Statement on using tools - Shiny",
    "section": "7.1 Posit Connect server",
    "text": "7.1 Posit Connect server\nPosit Connect is probably the simplest way to share a Shiny application once it is set up and working, however it is not free. You will also need a Linux server, either in the cloud or on your organisations network, on which to run the software. Once it is set up you will have access to a wide range of features, including authenticated access to Shiny dashboards and RMarkdown/ Quarto documents, as well as the facility to run RMarkdown/ Quarto on a schedule. Note also that Posit Connect works with Python content."
  },
  {
    "objectID": "statement-on-using-tools-shiny.html#shinyapps.io",
    "href": "statement-on-using-tools-shiny.html#shinyapps.io",
    "title": "7  Statement on using tools - Shiny",
    "section": "7.2 shinyapps.io",
    "text": "7.2 shinyapps.io\nshinyapps.io is also a paid service which can give you the ability to easily deploy Shiny applications in the cloud, and you can optionally add user authentication to your Shiny applications. The downside is that shinyapps.io is not suitable for use with sensitive data because you have no control over which server your data is hosted on."
  },
  {
    "objectID": "statement-on-using-tools-shiny.html#network-file-storage",
    "href": "statement-on-using-tools-shiny.html#network-file-storage",
    "title": "7  Statement on using tools - Shiny",
    "section": "7.3 Network file storage",
    "text": "7.3 Network file storage\nYou can distribute Shiny applications and the data associated with them on your organisational network file storage. This is a very secure way of distributing your work but the downside is that the people you are sharing it with need to actually run the code themselves with an installation of R and all of the packages in the Shiny application. This method is therefore only really useful to share your work with other data scientists."
  },
  {
    "objectID": "nhsr-vision.html#using-r-in-research",
    "href": "nhsr-vision.html#using-r-in-research",
    "title": "8  NHS-R vision",
    "section": "8.1 Using R in research",
    "text": "8.1 Using R in research\n\nA mistake in the operating room can threaten the life of one patient; a mistake in statistical analysis or interpretation can lead to hundreds of early deaths. So it is perhaps odd that, while we allow a doctor to conduct surgery only after years of training, we give SPSS® (SPSS, Chicago, IL) to almost anyone. Moreover, whilst only a surgeon would comment on surgical technique, it seems that anybody, regardless of statistical training, feels confident about commenting on statistical data.\n\n@vickers_interpreting_2005\nThe NHS, as one of the largest hospital and healthcare systems, is a world leader in research. Research and evaluation are carried out as funded projects as well as unfunded audits/ evaluation. Both of which often require statistics - the analysis often being done in SPSS/ SAS or Excel. These methods can produce flawed analyses which, moreover, are not reproducible.\nMany trusts do not employ statistics experts and will only be able to get statistical help on funded work by buying in time from academic/external statisticians. This means that the pilot work that clinicians do prior to applying for large grants can often be flawed, or promising work ends up not being completed and the grants never awarded because they didn’t have the statistics expertise.\nWhile we would not expect clinicians to become expert coders, the NHS-R community should work to develop and deliver training that would help clinicians to be able to use R, including the development of training specifically for those with a clinical/ non coding background. This training needs to include R for statistics as well as the more commonly included data wrangling and visualisation.\nBetter collaboration between R users working in academia and those in the NHS would also be beneficial."
  },
  {
    "objectID": "nhsr-vision.html#training",
    "href": "nhsr-vision.html#training",
    "title": "8  NHS-R vision",
    "section": "8.2 Training",
    "text": "8.2 Training\nThe NHS-R Community has developed/is developing training with many of the workshops being made available on the NHS-R Community YouTube channel and course material available on its GitHub (brought together in a Training book).\n\nWhere are the gaps in training provision at the current time?\nHow can NHS-R maintain/ increase the amount of training that it is able to deliver free to health and social care staff in the NHS in the UK?"
  },
  {
    "objectID": "nhsr-vision.html#development",
    "href": "nhsr-vision.html#development",
    "title": "8  NHS-R vision",
    "section": "8.3 Development",
    "text": "8.3 Development\nThe NHS-R community comprises members with a very wide diversity of job roles and skills. Although there is no one route to being a skilled and useful R developer in health and social care nonetheless the R community could usefully contribute to thinking on how to recruit, train, and develop analysts who use R and other open code approaches to data science/data analysis."
  },
  {
    "objectID": "nhsr-vision.html#events",
    "href": "nhsr-vision.html#events",
    "title": "8  NHS-R vision",
    "section": "8.4 Events",
    "text": "8.4 Events\nNHS-R already has a very successful conference but in the workshop there was a suggestion that there could be another NHS-R event focused on finding problems and solutions to them. There are several ways this could usefully be done, perhaps as a hackathon type approach where the problems are begun on during the event (finished during the event if there is time or worked on afterwards), or more of a problem definition/ alliance building type approach where the actual problems and the people who are interested in solving them are identified during the event and then the actual development is done later."
  },
  {
    "objectID": "nhsr-vision.html#appendix-a-workshop",
    "href": "nhsr-vision.html#appendix-a-workshop",
    "title": "8  NHS-R vision",
    "section": "8.5 Appendix A: workshop",
    "text": "8.5 Appendix A: workshop\nThe following summarises a workshop about the future of NHS-R.\n\n8.5.1 How has the NHS-R Community contributed to the system thus far?\nThe positive contribution of the NHS-R Community was shared by all stakeholders and included the following highlights. For analysts: a safe, trusted, supportive space to learn and share together, a badge of honour, joy, confidence, upskilling, networking, working across organisational boundaries without needing permission. For leaders: signposting to a trusted brand and community that can influence policy which is underpinned by two value systems - NHS and open source. For the wider system: NHS-R has shifted thinking on how to secure analytic needs in the future and is perhaps the world’s first open-source community focused on health and care with admirers across the globe.\n\n\n8.5.2 What is the need in the system given the change in the health and care landscape?\nThe system has evolved, and progress has been made since the NHS-R Community was established. Still, some common themes persist regarding the needs of the system; skills gaps, infrastructure needs, better collaborative working and more structured peer learning, and the development of analytical leadership. Specific examples include: methodological training for analysts, setting professional standards, equipping leaders with analytical thinking skills, supporting the use of operations research methods, building links with social care and researchers, quality assurance processes and more. There was consensus that the NHS-R Community should focus on its strengths and not duplicate or drift from this because this may undermine its impact (perhaps because it becomes less relevant to its core members who are flourishing in the freedom of NHS-R).\nBelow is a summary of what the “NHS-R Community” can do to support the system.\n\n\n8.5.3 What can the NHS-R Community do to support the system?\nThe following areas were identified. 1. Engage with NHS leaders to help them appreciate the potential of the NHS-R Community as a resource. 2. Work with NHSD/Transformation Directorate to remove barriers/create resources for IT departments to make open source tools readily available for analysts. 3. Provide an ‘Ask us’ hub where leaders and analysts can refer their questions or issues so that they can get a “grass roots” view from the NHS-R Community on how these might be best addressed. 4. Scaling local solutions nationally and vice-versa 5. Myth busting on “open-source” analytics including addressing security and information governance concerns. 6. Increased collaboration with national bodies such as NHS Transformation Directorate. 7. Set up an NHS Data Science Event (say over 3 to 5 days) for the NHS to identify common problems and develop shared solutions.\n\n\n8.5.4 We asked a pre-mortem question - imagine the NHS-R Community has died, what led to its demise?\nThe following were identified.\n\nThe NHS-R Community was too reliant on volunteers who were unable to sustain their input.\nThe NHS-R Community lost its values and was no longer a brand that was seen as safe, trusted, welcoming, especially to newbies.\nThe NHS-R Community got too pre-occupied with contributing to the centre and so lost touch with grass roots analysts.\nNational data science teams/bodies did not feel as if they had a stake in the NHS-R Community and so disengaged with it and could not see its relevance.\nR lost out to Python or some other open data science tool.\nThe NHS-R Community did not offer enough “attractors” to analysts (eg wider training, support, development opportunities, etc).\nThe NHS-R Community did not have adequate funds to continue to support it.\nThe NHS-R Community lost its central organising team and so disintegrated.\n\nThis should inform our approach to risk over the coming years. We should focus on resilience, being forward thinking and responsive, maintaining our values, broadening the organising team, actively seeking & cultivating new members, and finding funding solutions and partners that can support our activities."
  },
  {
    "objectID": "technical-r.html#what-programs-are-required",
    "href": "technical-r.html#what-programs-are-required",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.1 What programs are required",
    "text": "A.1 What programs are required\nTo write R code you will need the R program, an IDE (Integrated Development Environment) like RStudio or VSCode and (for Windows) the RTools program.\nIt is possible to code with the R language in just the R program however, it is not possible to use RStudio or VS Code without the R program as it is essentially the “engine”. Both RStudio and VS Code are more visually friendly graphical user interfaces (GUI).\nRTools is used by Windows to build some packages and, although there are sometimes warnings when this isn’t installed, it is not always required. As people in the NHS and other public sector organisations will have to contact IT teams for access to software it is advisable to ask for RTools just in case this is an issue."
  },
  {
    "objectID": "technical-r.html#getting-r",
    "href": "technical-r.html#getting-r",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.2 Getting R",
    "text": "A.2 Getting R\nThe link to to the R program has a few links so for Windows select Download R for Windows, then the subdirectory base which has the same link as install R for the first time. The uppermost link will say Download R- with the version for Windows."
  },
  {
    "objectID": "technical-r.html#packages",
    "href": "technical-r.html#packages",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.3 Packages",
    "text": "A.3 Packages\nR programming uses a lot of packages to build on the functionality of R and many of the packages are shared openly through GitHub. From GitHub, some people submit their packages for inclusion into CRAN - The Comprehensive R Archive Network.\nCRAN packages are checked for functionality, for example, that they can run on various operating systems, however, there will not be a check for the validity of content. That means that if there is a mistake in the package, as an example, in a statistical test, this won’t have been checked. However, because all packages are open to view and contribute to bugs, issues and recommendations for improvements can be found in the corresponding GitHub repositories."
  },
  {
    "objectID": "technical-r.html#asking-for-access-to-packages-outside-cran",
    "href": "technical-r.html#asking-for-access-to-packages-outside-cran",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.4 Asking for access to packages outside CRAN",
    "text": "A.4 Asking for access to packages outside CRAN\nWhilst some IT teams may restrict access just to CRAN this can be too restrictive as public sector and civil service packages are sometimes not submitted to CRAN due to their being in development (too many changes in quick succession can prevent inclusion into CRAN) or not wishing to go through the checks which may not be necessary (being able to run on a Mac, for example, is not necessary when Windows systems are more commonly used in public sector).\nSome packages are peer reviewed for content such as the UKHSA (previously Public Health England) package {fingertipsR} that is available through ROpenSci. Consequently, when contacting an IT team to have permission to use packages, it is advisable to ask for access to install these yourself, with access to GitHub packages and to be able to update them regularly.\nHaving the ability to install and update packages does not require administrator access on a computer."
  },
  {
    "objectID": "technical-r.html#updating-packages",
    "href": "technical-r.html#updating-packages",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.5 Updating packages",
    "text": "A.5 Updating packages\nPackages will be loaded to libraries that are specific to the user if the computer is used on a network drive. Consequently, if installation of packages is on a case by case basis, it will be necessary to ensure that each team member has the package installed in their own user folder.\nAs is good practice with programs and apps, regular checks for updates should be made and if these need to be done by IT this should be scheduled according to the user’s requirements. This is because there are two approaches to updating packages, the first is to update regularly which can be useful to fix any bugs and get updated functions as they are added. However, issues can arise as new functions can have bugs and older bugs may have “workarounds” in analysis code that could break.\n\n\n\n\n\n\nUpdating the R program\n\n\n\n\n\nIt’s worth noting that updating the R program will require packages to be reinstalled. This won’t happen if only RStudio is updated.\n\n\n\nThe other approach to updating packages is in a controlled way so as to not break code. The issue with this is that latest functionality is lost to the analysis and may never be introduced, in case something breaks.\nTo assist with this there are pipeline packages like {renv} which takes a snapshot of the packages as they are used in code and which can be retained within a project environment so that changes outside don’t affect the analysis:\n\nit records the version of R + R packages being used in a project, and provides tools for reinstalling the declared versions of those packages in a project\n\nThese snapshots can also be shared with other members of the team who are working on the same project."
  },
  {
    "objectID": "technical-r.html#quarto",
    "href": "technical-r.html#quarto",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.6 Quarto",
    "text": "A.6 Quarto\nQuarto is the next generation of reporting from RMarkdown that allows for code and text to be used together to produce a wide variety of outputs like word, pdf, PowerPoint, slides, books and websites. Quarto also allows for more flexibility in use by people who use Python and prefer to use VS Code (or other IDEs).\nThe latest version of Quarto is built into the RStudio IDE itself and to update it is necessary to use download the Quarto CLI (command line interface) https://quarto.org/docs/get-started/.\n\n\nThe Quarto CLI download is a win.msi file so may not require authorisation from IT teams to download and install.\nThe package {quarto} contains functions that can be used in R to run some of the command line commands and isn’t necessary to have if you are happy to use the command line or Terminal as it is known as in RStudio. For example, to preview this book, in the command line the code is:\nquarto render\nbut in R using {quarto} it is:\nquarto::quarto_render()"
  },
  {
    "objectID": "technical-r.html#updating-r-from-a-package",
    "href": "technical-r.html#updating-r-from-a-package",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.7 Updating R from a package",
    "text": "A.7 Updating R from a package\nThe package {installr} has the function updateR() that updates R. A pop up will appear if the version available is later than the one installed but if it is run from RStudio the message:\n\nIt is best to run updateR() from Rgui and not from RStudio. Would you like to abort the installation and run it again from RGui?\n\nwill appear.\n\nTo find the R program in Windows click on the windows icon and start type R.\nIf the program cannot be found and you are on a networked system with user accounts then go to in Windows Explorer and look in the folder C:\\Users\\YOUR.NAME\\AppData\\Local\\Programs\\R\\R-4.3.0\\bin\\x64 with the file being R.exe for just the command line or Rgui.exe which has menus and buttons.\n\nRStudio will not update the R version automatically - the version can be seen at the top of the Console or by typing R.version in the console.\n\nTo update go to Tools/Global options and the opening menu will have R session at the top.\nClicking on the Change... button will open up a screen with the versions of R available to RStudio.\nSelect the third radio button option to select the R version which will mean you can select the version you require.\nRStudio will then prompt to close and restart RStudio."
  },
  {
    "objectID": "technical-r.html#uninstall-previous-versions-of-r",
    "href": "technical-r.html#uninstall-previous-versions-of-r",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.8 Uninstall previous versions of R",
    "text": "A.8 Uninstall previous versions of R\nInstalling later versions of R won’t remove the previous and these can stay on a computer or be removed (often requires admin rights to the computer). The package {installr} has a function uninstall.r() which may not required admin rights.\nA prompt window will appear with the versions available to uninstall."
  },
  {
    "objectID": "technical-r.html#installr",
    "href": "technical-r.html#installr",
    "title": "Appendix A — Technical guidance - R",
    "section": "A.9 {installr}",
    "text": "A.9 {installr}\n{installr} has a few other functions that could be useful for installing other programs such as:\ninstallr::install.git()\ninstallr::install.python()\ninstallr::install.RStudio() # will open up the relevant page if it cannot install\ninstallr::install.Rtools()"
  },
  {
    "objectID": "technical-python.html#what-programs-are-required",
    "href": "technical-python.html#what-programs-are-required",
    "title": "Appendix B — Technical guidance - Python",
    "section": "B.1 What programs are required",
    "text": "B.1 What programs are required\nContent to be added, committing this to see if the book renders in GitHub Actions."
  },
  {
    "objectID": "contribution.html#contributing-workflow",
    "href": "contribution.html#contributing-workflow",
    "title": "Appendix C — Contributing to GitHub repositories",
    "section": "C.1 Contributing workflow",
    "text": "C.1 Contributing workflow\nIf you’re new to Github and/or Markdown, Github’s own contributor’s guide provides a good overview of these topics.\nTo contribute:\n\nReview the issue list, raise an issue if required\nFork this repository\nMake changes or add new scripts\nCommit and push to your own repository\nCreate a new pull request detailing your additions\nWait for pull request to be reviewed, and merged (not everyone will have permission to merge pull requests)\nCelebrate your first step into the open source world and contribute more!"
  },
  {
    "objectID": "contribution.html#using-issues",
    "href": "contribution.html#using-issues",
    "title": "Appendix C — Contributing to GitHub repositories",
    "section": "C.2 Using issues",
    "text": "C.2 Using issues\nIf you spot something that needs to be changed, or would like to suggest some new content, please raise an issue.\nBefore raising a new issue, have a look through the existing ones in case it’s already been raised."
  },
  {
    "objectID": "contribution.html#pull-requests-and-merging",
    "href": "contribution.html#pull-requests-and-merging",
    "title": "Appendix C — Contributing to GitHub repositories",
    "section": "C.3 Pull requests and merging",
    "text": "C.3 Pull requests and merging\n\nIf you have a change (or a new page) to raise, please create an issue first as there may be someone thinking of contributing something similar.\nThe main branch will be restricted to just those with access to the repository and they are asked to not commit directly as good practice.\nFor all changes you will need to create a fork, and then a pull request (click compare across forks and select your version).\n\nPlease reference the issue the pull request resolves, so it will be closed automatically."
  },
  {
    "objectID": "contribution.html#contributing-any-datasets",
    "href": "contribution.html#contributing-any-datasets",
    "title": "Appendix C — Contributing to GitHub repositories",
    "section": "C.4 Contributing any datasets",
    "text": "C.4 Contributing any datasets\nParticularly for packages like {NHSRdatasets}:\n\nAdd your dataset in the data folder, in .rda format.\nThe best way to do this is with the {usethis} package with “gzip” compression: usethis::use_data(data, compress=\"gzip\")"
  },
  {
    "objectID": "contribution.html#contributing-guidelines-and-etiquette",
    "href": "contribution.html#contributing-guidelines-and-etiquette",
    "title": "Appendix C — Contributing to GitHub repositories",
    "section": "C.5 Contributing guidelines and etiquette",
    "text": "C.5 Contributing guidelines and etiquette\n\nPreview your Markdown code to make sure the format is not broken.\nMaterial, including commit messages, should be written in clear and simple English.\nNothing included should be confidential, private or disclose any personal or sensitive data (and that is also necessary for commits as well as code).\nFollow the code of conduct in the repository at all times.\nFor further guidance refer to the NHS-R Way Style Guides.\n\nWhen contributing any additions, the contributor certifies that they are the author, or has cited the author and is authorised to reuse/reference the material"
  },
  {
    "objectID": "contribution.html#acknowledgements",
    "href": "contribution.html#acknowledgements",
    "title": "Appendix C — Contributing to GitHub repositories",
    "section": "C.6 Acknowledgements",
    "text": "C.6 Acknowledgements\nThis contributing guide is adapted from NHS Digital’s Contributor’s Guide."
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Appendix D — Glossary",
    "section": "",
    "text": "Reproducible Analytics Pipelines (RAP): analytics processes developed in open source programming languages and adhering to software engineering best practices to allow for reproducing analyses with very little effort.\nRepo/Repository: a set of files organised in a project for a specific purpose, containing code or documentation under version control.\nOGL: Open Government License\nMIT: Massachusetts Institute of Technology (license)\nCC0: Creative Commons (license)\nGDS: Government Digital Services\nAF: Analysis Function"
  }
]