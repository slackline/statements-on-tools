[["index.html", "NHS-R Community Statement on Tools Introduction", " NHS-R Community Statement on Tools NHS-R Community Last Updated 2023-05-18 Introduction In this book we’ve compiled a set of technical resources, links and write down our experiences of using open data science programs like R and Python within the NHS and beyond. It is highly opinionated and is not representative or endorsed by the NHS or any organisations within the NHS, public sector or civil service. Whilst the views are written by members of the NHS-R Community, these too may not necessarily be shared with everyone equally and even may change over time. If you’d like to contribute or comment feel free to open an issue on the GitHub repository "],["purpose.html", "1 Purpose 1.1 NHS-R Community", " 1 Purpose This book is a contribution of efforts and experiences from the members of the NHS-R Community - which is more than just NHS and includes more languages than just R - in getting data science tools for their jobs. Very often an analyst or data scientist (or anyone interested in analysis) wants to try to use R or Python, particularly if they are wanting to set up Reproducible Analytical Pipelines with a code first approach, and getting access can sometimes be very difficult. Taking that a step further to opening up that code publicly can be an even greater hurdle. The NHS is not one organisation and the experiences in getting data science tools varies widely so this is an attempt to bring together technical resources, links and write down our experiences of using open data science programs. The difficulties we encounter may well be shared with colleagues from all organisations, not just the NHS, and so we welcome all contributions to this collective knowledge. 1.1 NHS-R Community This book is being created by the NHS-R Community which was set up in 2018 to promote the use of R in the NHS. As a community we have grown and built up a reputation for openness, sharing and support through training, webinars, conferences and a very active and friendly Slack group. Whilst the focus of NHS-R was originally on R and the NHS, many members of the community use other tools and come from local authorities, civil service, voluntary sector, charitable organisations, industry and some individuals who are not part of any organisation. More detail on the NHS-R Community can be found in the NHS-R Way book which is published through both GitHub and Netlify. "],["open-code-in-the-nhs.html", "2 Open code in the NHS 2.1 Introduction 2.2 References 2.3 Specific challenges 2.4 Licences/Licenses 2.5 Useful blogs", " 2 Open code in the NHS 2.1 Introduction There are number of organisations and publications advocating open coding in its various guises within the NHS and more generally across the public sector and academia. This page is intended as a place to collate relevant literature and proposed/tried approaches to implement open code policies in the NHS, from individual teams up to entire organisations. There is also a significant crossover between open code and software engineering best practice, which means that they are often promoted together as an effective means to improve reproducibility. 2.2 References The following is a list of some of the material available discussing and supporting open coding and software engineering approaches to code development in the NHS: Better, broader, safer using health data for research and analysis1 (also known as The Goldacre Report) - a systematic and far-reaching report, written on behalf of the Department of Health and Social Care, advocating for open coding and Reproducible Analytical Pipelines (RAP) in the NHS, Government Analysis Function Reproducible Analytical Pipelines (RAP) Strategy2 - released in June 2022 this is a comprehensive strategy for Government in summarising the finding of the RAP strategy since 2017 and the plan for future work, Data saves lives: reshaping health and social care with data3 - a broad document that covers many aspects of “improving trust in the health and care system’s use of data” which extends to how data is used and references the Goldacre Review4, Office for Statistics Regulation – Overcoming Barriers to Adoption of RAP5 - a report written in support of RAP for adoption by all government departments doing analytics, describing the challenges and recommending solutions to address those challenges covering both organisational, team-level and individual barriers, Open sourcing analytical code - from the Analysis Function and first published in March 2023 is guidance for anyone working in government and who is involved or owns analysis pipelines, Quality assurance of code for analysis and research6 - also known as the Duck Book is a living document for Analysis Standards and Pipelines for the Office of National Statistics, NHS England Open Source Programme7 - can be found in the Digital Transformation pages, Government GitHub Community - links to UK Central and Council GitHub repositories amongst many others across the world, NHS England R Reporting8 - includes tutorials and example A&amp;E Attendance Report, 2.2.1 From organisations/teams that no longer operate NHSx (now NHS England) Open Source Policy9 - a comprehensive description of why and how open source should be implemented in the NHS, including statements about best practice and a check list for open sourcing code. An issue was opened in Nov 2022 about rebranding to NHS England from NHSx, NHS Digital (now NHS England) RAP Community of Practice10 - a wealth of material pertaining to setting up and running RAP. The team also write blogs, Making source code open and reusable11 - from the Gov.uk Service Manual for the Government Digital Service, CDU Data Science Blog12 - the Clinical Development Unit was a team in Nottinghamshire Healthcare NHS Foundation Trust that coded openly and wrote about some of their approaches on a {distill} blog site. This also features in the NHS England playbook which is a series of case examples, and which was itself referred to in the Data Saves Lives document:13 Our commitments We will publish a digital playbook on how to open source your code for health and care organisations. Guidance on where to put the code, how to license and maintain it, and best practice for working with suppliers will be published in addition to case studies of teams who have done this – completed May 2022. 2.3 Specific challenges 2.3.1 Opening code without exposing data/‘secrets’ In coding terms exposing secrets often mean sharing passwords or keys but for the data analysis that occurs in the NHS and other public sector organisations, this will also mean the sharing of personal, clinical or other sensitive data. In practice there are a number of approaches to avoiding this happening, see the specific NHS approaches: NHSx Open Source Policy14 (note NHSx is now NHS England but this hasn’t been adopted as an NHS England Policy), NHS England’s R Reporting15 and CDU Data Science Team blogs about GitHub16 Making source code open and reusable17 (provides broad requirements like storing secret keys and credentials separately) and these include setting up repositories so there are automated restrictions to prevent and reduce the risk of unintentional disclosure of any sensitive data. Nevertheless, we do have to rely upon people using these recommendations and setting up their systems which is very similar to our use of email or social media accounts. As an example, with email we need to rely upon senders using the blind copy in email if the recipients include patients or the public as there is no automated way to prevent a breach of emails otherwise. Consequently, mistakes have and do happen and there are mechanisms which are in place to report these breaches and does not mean that we prevent people from using email or social media. Systems like GitHub do offer the possibility to set up processes to prevent, reverse and delete accidental sharing (breaches) but are still subject to reporting for near misses and incidents when these occur. However, it may be that these are only reported locally and do not, currently, get shared more widely. 2.3.2 Opening code without giving away commercial/business/clinical proprietary information (and Intellectual Property) The issue of intellectual property is a very difficult one to argue against, particularly when analysts and data scientists are not necessarily trained or familiar in this area of law. However, it is often used as a reason why not to share specific code, like SQL, but without any formal detail as to how this will be breaking any laws. By publishing SQL code it is often assumed that the structure of the databases, which is owned by a company, could be inadvertently revealed. However, there are examples of clinical database schemas like that of TPP who own SystmOne and which has been shared as part of the OpenSafely secure analytics platform for NHS electronic health records and it could be said that discussions related to sharing code should be considered as part of the procurement process. And also Government guidance, When code should be open or closed, from the Central Digital &amp; Data Office states: Unless your database schema contains credentials it is not sensitive and can be open. You should store any credentials separately and keep them closed. 2.3.3 Coding in the open There is, currently, no one policy or procedure that can be referred to in terms of coding in the open. Whilst it has been recommended strongly in many of the important reviews available to the NHS like Data Saves Lives18] and Goldacre Review19 there continues to be little guidance on what this looks like in day to day work. Some teams have published in the open, like the CDU Data Science Team20 and features as a case study example, however, the team has changed in approach and name as of 2023 and the blog site is no longer being updated. The NHSx Open Source policy21 recommended that all development/analytics work done in the NHS be coded in the open unless there is good reason not to. However, NHSx moved into NHS England in 2022 and the GitHub repository (where this is published) and continues to state: Current status: Version 1.0 - This policy is currently going through internal review as part of the adoption process. It is worth noting, in terms of open coding, this document also says: An internal code review should be conducted for all open source projects and specific responsibilities must be met within or close to the development team. Reviews could be deemed to slow the process of sharing code openly and so needs to be considered within the context of software code maintenance which is a subject in itself. Books on code review principles from the Tidyteam at Posit can be a really good place to start. The Making source code open and reusable22 suggests making your code open from the start and gives a short check list on what to consider when making existing code open. 2.4 Licences/Licenses To clarify on spelling: license is both a noun and a verb in US English, but in UK English licence may be used for a noun and license as a verb. As the programs and tools, like GitHub, are often US based the word license is the usual expected spelling. This becomes important for searches, which is why the header title here has both spelling - just in case. Although documents like Data saves lives23 states there was an intention to: publish a digital playbook on how to open source your code for health and care organisations. Guidance on where to put the code, how to license and maintain it, and best practice for working with suppliers will be published in addition to case studies of teams who have done this – completed May 2022. this hasn’t led to any particular document to explain when or how to use licenses. The reference to a digital playbook where the requirement is to: create a project that can be used by other healthcare organisations links to case study scenarios which may have information, but which will require reading through to check and reference. One site that is listed is the CDU Data Science Team24 and whilst this team used licenses there was never any explicit mention on how or when to use them. Government documents like the Duck book25 do have sections on copyright and licenses and their recommendations, along with the Analysis Function, are to use MIT and OGL. The Making source code open and reusable26 states: You should publish your code under an Open Source Initiative compatible licence. For example, GDS uses the MIT licence. All code produced by civil servants is automatically covered by Crown Copyright. However, many people who are part of the NHS-R Community are not considered civil servants: … civil servants are defined much more narrowly than public sector workers: police, teachers, NHS staff, members of the armed forces and local government officers are not counted as civil servants. Even where a person’s work is covered by being a Civil Servant, it is still really good practice to include the corresponding license to any published work as it cannot be assumed that people know the work is covered by the license or that the person was a Civil Servant. 2.4.1 NHS-R Community use of licenses NHS-R Community repositories are licensed under MIT for code based projects like Shiny apps and packages: the MIT License is a permissive software license that places few restrictions of reuse. Users of software using an MIT License are permitted to use, copy, modify, merge publish, distribute, sublicense and sell copies of the software. and CC0 for text based projects like training and books (like this): allows the creator to retain copyright whilst allowing others to copy and distribute and make use of their work non-commercially. The Creative Commons license also ensures creators get the recognition and credit for the work they produce and share. Whilst there is a cross over between text and code, these two licenses offer the freedom for resuse. 2.4.2 Setting up licenses There are two ways to starting a repository for sharing on GitHub. Firstly, there is creating a repository directly on the GitHub website and you can select the appropriate license as you do that. If, however, you create the project locally, using R for example, you can add a license to it using a package called {usethis} and typing in the R console: usethis::use_cc0_license() usethis::use_mit_license() OGL though does not appear in the selections for {usethis} or GitHub. 2.5 Useful blogs https://gds.blog.gov.uk/2017/09/04/the-benefits-of-coding-in-the-open/ https://technology.blog.gov.uk/2017/09/27/dont-be-afraid-to-code-in-the-open-heres-how-to-do-it-securely/ “Better, Broader, Safer.”↩︎ ???↩︎ ???↩︎ “Better, Broader, Safer.”↩︎ “Reproducible Analytical Pipelines.”↩︎ ???↩︎ ???↩︎ ???↩︎ “NHS Open Source Policy.”↩︎ “RAP Community of Practice.”↩︎ ???↩︎ ???↩︎ ???↩︎ “NHS Open Source Policy.”↩︎ ???↩︎ ???↩︎ ???↩︎ ???↩︎ “Better, Broader, Safer.”↩︎ ???↩︎ “NHS Open Source Policy.”↩︎ ???↩︎ ???↩︎ ???↩︎ ???↩︎ ???↩︎ "],["statement-on-using-tools.html", "3 Statement on using tools 3.1 About this chapter 3.2 Introduction 3.3 What is inside a package? 3.4 Why not include all this useful code in R? 3.5 Where do you find packages? 3.6 An example 3.7 What’s the problem", " 3 Statement on using tools The NHS-R community aims to support the learning, application and exploitation of R in the NHS. A key part of this aim is to support every organisation in making R available as a viable means of conducting healthcare analytics. This is an evolving document which describes how and why to use R and other data science tools and to share and reuse code safely in health and social care settings. The scope and content are expanding all the time as the community collaboratively produces a definitive statement of the NHS-R way. Please file issues, make pull requests, and get involved, we’re very happy from hear from friends from inside and outside of NHS-R. 3.1 About this chapter This chapter elaborates what is required to make R viable in practice. R is a powerful language for statistical work and other kinds of data analysis. Much of this power comes from the way that R fits together with two important helpers: R Studio and R packages. This chapter describes the way that R, R Studio, and R packages work together in non-technical language. Our aim in writing this simple introduction is to provide a useful resource to leaders within the NHS and other organisations in health and care who wish to support and encourage the use of R in their practice. Our motive in writing this chapter is to overcome the institutional reluctance that is often encountered when trying to use new open-source tools. For many years we have had guidance that open source programs should be encouraged. Yet open source tools are frequently identified as security or information governance risks by organisations. We think that these concerns are largely the result of confusion about the nature of open source tools. This chapter is therefore aimed at clearing up some of this confusion, by providing a simple, non-technical, and focused introduction to the tools that are an integral part of R. Although the current focus of this chapter is specific to R and its tools, we note that similar situations are found in many other languages and programmes. We discuss this below in the section Why not include all this useful code in R?. As the NHS-R Community matures we may extend this learning to cover other open-source tools such as Python. 3.1.1 Some use cases for this chapter To provide guidance to Information Governance (IG) practitioners who have been asked to evaluate the use of R in some health and care context To provide reassurance and explanation to collegues and managers when R is being considered for use in some project To support those new to R in understanding how the many packages and tools fit together 3.2 Introduction R uses packages. Packages are small, reusable packages of code that allow users to create and use new functions. These packages can be easily distributed so that users can adopt them in the code that they are writing. To illustrate, imagine that you run into a tricky problem programming problem. We can think of three different ways of solving this problem: Write all-new code from scratch Copy-paste working code from somewhere else Use a package The traditional approach might be to solve the problem by writing completely new code from scratch. And sometimes writing original code is the best way to solve problems, particularly if those problems are very unusual. Often though the problems that we encounter are not at all unusual. Commonly encountered problems are, by definition, the kind of problems that we would most often encounter. We give an example below about times and dates, which frequently cause problems for programmers. Writing a completely original solution each time we encounter a common problem seems inefficient. So it is no surprise that code reuse is common practice across the field. The scale of websites dedicated to sharing useful code (like stack overflow) is testament to the deep sense of professional loathing that many programmers have for inefficiency in their work. But finding and sharing reliable code to solve common problems comes with difficulties of its own. You could look for solutions online, and then copy and paste any promising code chunks into your project. While generally quicker and easier than writing new code from scratch, copying code manually requires a surprisingly high degree of skill. Both an expert’s eye for assessing possible solutions, and the skills to appropriately adjust borrowed code to fit the requirements of your project are needed. Packages are a way of standardising and sharing useful code. Rather than copying and adjusting a block of code, you simply add the package to your programme. You can then use the new functions contained in the package as if you had written them yourself. They are a consistent way to extend the functions available to user. Many programming languages use packages (or libraries) in a similar way. Python is a good example, where many useful functions are done using third-party packages. Packages make R better: easier to use and learn, more flexible, and with richer options for analysis. They are a feature and not a bug, and for many users their work in R utterly depends on packages. 3.3 What is inside a package? “In R, the fundamental unit of shareable code is the package. A package bundles together code, data, documentation, and tests, and is easy to share with others.” Wickham and Bryan, 2019. R packages: Organize, Test, Document and Share Your Code To illustrate, we can show the code from two related NHS-R packages: NHSRplotthedots (CRAN) and NHSRdatasets (CRAN) Component Purpose Example Code Allows the user to use functions in their own code the code for the ptd_spc function used to create SPC charts Data Demonstrates the function(s), training new users sample of NHSR dataset linked to NHSRplotthedots Documentation User guides, package vignettes and other documentation documentation for the ptd_spc function And we can usually find at least three of these components in most R packages (tests are a bit more elusive, and are less commonly encountered). It’s also worth noting that the data included in community packages is sample data or open data that is really meant to help users experiment with the new functions in a package. It’s definitely not standard practice to share real data for analysis in this way. Lots of these standard datasets built into packages - like mtcars - are used over and over again as ways of demonstrating R functions. If you’re writing a package, we would encourage caution as to the data that you include. We won’t provide detailed guidance here on what’s okay to include in your package. But would be useful to remind package authors that the proper oversight should be carried out before sharing any data as part of your package. 3.4 Why not include all this useful code in R? Call the approach that R takes modular. R provides some core functions, but users are able to add modules (packages) that change the functions that are available. It’s like being able to customize the tools that you use to work on each project. Users coming to R from software that does not work like this can find this modular approach messy and odd. If you’ve grown up working in Microsoft Excel, then you will be accustomed to doing almost any task using just the build-in functions in the core software. For that user, switching to an environment where the user has to select and add small, specific, tools to achieve things can feel rather alien. And this difference has deep roots, representing a deep difference in software engineering philosophy. R broadly follows a UNIX-like small tools approach as a way of managing and reducing the complexity of computer systems. As Eric Raymond put it, this is one of the central rules of the UNIX philosophy: Rule of Modularity: Write simple parts connected by clean interfaces. Raymond 2003 The Art of UNIX Progamming Another reason: each project written in R is different. Isn’t it great to be able to select just the right tools needed to do the job properly? On this, you can find a list of some of the packages that the NHS-R community find particularly useful at https://github.com/nhs-r-community/awesome-nhsr. 3.5 Where do you find packages? The recognised global repository for R packages is called CRAN (the Comprehensive R Archive Network). R packages must pass through a strict system of checks across multiple platforms if they’re to be accepted into CRAN. Acceptance is a sign of quality and a protective measure that helps ensure that packages meet minimum standards. It also provides extra assurance to business IT teams that the packages are ‘safe’ for use. The power of packages is reflected in the number of them that are available. CRAN currently lists a total of 18872 packages. Adding and updating packages is one of the ways that R keeps developing. Many community groups - including NHS-R - have produced packages to do useful things for their work. And these packages are freely available to the community. That community spirit is an important part of the open software movement. We think that sharing useful code in an open way is important. Governments too think similarly. For example, see the requirement to make new code open source from NHS England digital openness and similar from ScotGov. The recent Goldacre review (2022) comes to similar conclusions: Libraries Useful functions often outgrow individual projects and build a broader user-base, especially when a large number of users are all trying to solve the same suite of related problems, with a range of related functions. When this happens, more experienced programmers move the work into reusable code ‘libraries’ and share them through package indexes or archive networks. The process of creating and sharing libraries can improve the quality of code, because work that is more widely used is likely to be more widely reviewed. Popular libraries tend to be well documented and come with clear explanations and examples, which decrease the barriers to entry for inexperienced coders: when more people use the work, more people invest in improving it. By creating and sharing a library, researchers contribute to the broader research community. This more advanced variety of code sharing is common in many areas of scientific research, such as Geographic Information Science, but it is less common at present in health data research. Better, broader, safer: using health data for research and analysis We believe that this approach is safe, and are not aware of any data protection issues that have arisen because of the use of packages in R. 3.6 An example image credit Working with dates is often a source of pain for data analysts. That’s because times and dates are surprisingly complicated. For example, there are lots of ways of storing and representing dates. There are also many inconsistencies - 24 hours in a day but 60 seconds in a minute, leap years, different numbers of days in months, time zones, and so on. Many analysts use an R package called lubridate to help manage dates and times. This package has lots of helpful functions for parsing, calculating, and representing dates and times. For example, imagine that you want to calculate the number of seconds between two dates. For simple cases, that’s not too hard to do in base R. But what if some of your time values cross time zones? What if clock time has changed (say, due to daylight savings) during that interval? The functions in the {lubridate} package allow analysts to ignore some of this complexity, meaning that they don’t need to write many lines of code in order to accommodate time zones each time they want to do a simple duration calculation. 3.7 What’s the problem As we’ve discussed above, the philosophy of using packages in R is rather different from other approaches. This can cause difficulties, particularly when risk management practices often assume that a programme is a broadly stable lump of functions, rather than a loose coalition of packages. To identify of this issues that we have encountered: Packages present a moving target for information governance. How can we assess the risk of something that is always liable to change? Our response to this: consider the system (R, RStudio, and packages) as the correct unit of analysis. Because packages are so widely used, it does not make sense to carry out information governance assessments of R by itself. There are so many packages (c.19k packages on CRAN), and there are several different sources for packages. How can we be sure that they are all safe? Our response to this is to point to community standards for packages. For example, CRAN carries out oversight on submitted packages, which have to meet certain standards. This precludes some worries about what might be lurking in a hypothetical package. It is also worth saying that we are aware of no cases where R packages have lead to security problems for users. Packages contain data, and therefore need data protection impact assessment. As discussed above, the data in R packages is used for testing, training, and demonstration purposes only, and isn’t a method for sharing live data between users. How can free software be trustworthy? Isn’t there going to be a catch? And who is responsible for ensuring the quality and safety of this software? Free open-source software (FOSS) is now widely used across sectors. Useful comments in FAQ section of HSMA site: It is also important to highlight that all software has potential vulnerabilities, including the proprietary software that you already have installed. Therefore, good software security practices should be maintained regardless of the software you are using. "],["nhs-r-vision.html", "4 NHS-R vision 4.1 Using R in research 4.2 Training 4.3 Development 4.4 Events 4.5 Appendix A: workshop", " 4 NHS-R vision 4.1 Using R in research A mistake in the operating room can threaten the life of one patient; a mistake in statistical analysis or interpretation can lead to hundreds of early deaths. So it is perhaps odd that, while we allow a doctor to conduct surgery only after years of training, we give SPSS® (SPSS, Chicago, IL) to almost anyone. Moreover, whilst only a surgeon would comment on surgical technique, it seems that anybody, regardless of statistical training, feels confident about commenting on statistical data. Vickers27 The NHS, as one of the largest hospital and healthcare systems, is a world leader in research. Research and evaluation are carried out as funded projects as well as unfunded audits/ evaluation. Both of which often require statistics- the analysis often being done in SPSS/ SAS or Excel. These methods can produce flawed analyses which, moreover, are not reproducible. Many trusts do not employ statistics experts and will only be able to get statistical help on funded work by buying in time from academic/external statisticians. This means that the pilot work that clinicians do prior to applying for large grants can often be flawed, or promising work ends up not being completed and the grants never awarded because they didn’t have the statistics expertise. While we would not expect clinicians to become expert coders, the NHS-R community should work to develop and deliver training that would help clinicians to be able to use R, including the development of training specifically for those with a clinical/ non coding background. This training needs to include R for statistics as well as the more commonly included data wrangling and visualisation. Better collaboration between R users working in academia and those in the NHS would also be beneficial. 4.2 Training The NHS-R community has developed/ is developing training on introduction to R, Shiny, R Markdown, git, and interactive plotting, amongst other things. Where are the gaps in training provision at the current time? How can NHS-R maintain/ increase the amount of training that it is able to deliver free to health and social care staff in the NHS in the UK? 4.3 Development The NHS-R community comprises members with a very wide diversity of job roles and skills. Although there is no one route to being a skilled and useful R developer in health and social care nonetheless the R community could usefully contribute to thinking on how to recruit, train, and develop analysts who use R and other open code approaches to data science/data analysis. 4.4 Events NHS-R already has a very successful conference but in the workshop there was a suggestion that there could be another NHS-R event focused on finding problems and solutions to them. There are several ways this could usefully be done, perhaps as a hackathon type approach where the problems are begun on during the event (finished during the event if there is time or worked on afterwards), or more of a problem definition/ alliance building type approach where the actual problems and the people who are interested in solving them are identified during the event and then the actual development is done later. 4.5 Appendix A: workshop The following summarises a workshop about the future of NHS-R. 4.5.1 How has the NHS-R Community contributed to the system thus far? The positive contribution of the NHS-R Community was shared by all stakeholders and included the following highlights. For analysts: a safe, trusted, supportive space to learn and share together, a badge of honour, joy, confidence, upskilling, networking, working across organisational boundaries without needing permission. For leaders: signposting to a trusted brand and community that can influence policy which is underpinned by two value systems - NHS and open source. For the wider system: NHS-R has shifted thinking on how to secure analytic needs in the future and is perhaps the world’s first open-source community focused on health and care with admirers across the globe. 4.5.2 What is the need in the system given the change in the health and care landscape? The system has evolved, and progress has been made since the NHS-R Community was established. Still, some common themes persist regarding the needs of the system; skills gaps, infrastructure needs, better collaborative working and more structured peer learning, and the development of analytical leadership. Specific examples include: methodological training for analysts, setting professional standards, equipping leaders with analytical thinking skills, supporting the use of operations research methods, building links with social care and researchers, quality assurance processes and more. There was consensus that the NHS-R Community should focus on its strengths and not duplicate or drift from this because this may undermine its impact (perhaps because it becomes less relevant to its core members who are flourishing in the freedom of NHS-R). Below is a summary of what the “NHS-R Community” can do to support the system. 4.5.3 What can the NHS-R Community do to support the system? The following areas were identified. 1. Engage with NHS leaders to help them appreciate the potential of the NHS-R Community as a resource. 2. Work with NHSD/Transformation Directorate to remove barriers/create resources for IT departments to make open source tools readily available for analysts. 3. Provide an ‘Ask us’ hub where leaders and analysts can refer their questions or issues so that they can get a “grass roots” view from the NHS-R Community on how these might be best addressed. 4. Scaling local solutions nationally and vice-versa 5. Myth busting on “open-source” analytics including addressing security and information governance concerns. 6. Increased collaboration with national bodies such as NHS Transformation Directorate. 7. Set up an NHS Data Science Event (say over 3 to 5 days) for the NHS to identify common problems and develop shared solutions. 4.5.4 We asked a pre-mortem question - imagine the NHS-R Community has died, what led to its demise? The following were identified. The NHS-R Community was too reliant on volunteers who were unable to sustain their input. The NHS-R Community lost its values and was no longer a brand that was seen as safe, trusted, welcoming, especially to newbies. The NHS-R Community got too pre-occupied with contributing to the centre and so lost touch with grass roots analysts. National data science teams/bodies did not feel as if they had a stake in the NHS-R Community and so disengaged with it and could not see its relevance. R lost out to Python or some other open data science tool. The NHS-R Community did not offer enough “attractors” to analysts (eg wider training, support, development opportunities, etc). The NHS-R Community did not have adequate funds to continue to support it. The NHS-R Community lost its central organising team and so disintegrated. This should inform our approach to risk over the coming years. We should focus on resilience, being forward thinking and responsive, maintaining our values, broadening the organising team, actively seeking &amp; cultivating new members, and finding funding solutions and partners that can support our activities. “Interpreting Data from Randomized Trials.”↩︎ "],["glossary.html", "5 Glossary", " 5 Glossary Reproducible Analytics Pipelines (RAP): analytics processes developed in open source programming languages and adhering to software engineering best practices to allow for reproducing analyses with very little effort. Repo/Repository: a set of files organised in a project for a specific purpose, containing code or documentation under version control. OGL: Open Government License MIT: Massachusetts Institute of Technology (license) CC0: Creative Commons (license) GDS: Government Digital Services AF: Analysis Function "],["references-1.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
